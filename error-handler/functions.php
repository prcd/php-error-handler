<?php

// do not display errors
error_reporting(0);

// register error handling functions
set_error_handler('error_handler');
register_shutdown_function('error_handler_fatal');
register_shutdown_function('error_handler');

/**
 * Registered to set_error_handler() and register_shutdown_function()
 * @param $err_no
 * @param $err_str
 * @param $err_file
 * @param $err_line
 * @return null
 */
function error_handler($err_no = null, $err_str = null, $err_file = null, $err_line = null)
{
	static $log   = [];
	static $fatal = false;

	if ($err_no === null) {
		// being called as a shutdown function, pass data through to next function
		error_handler_final($log, $fatal);
		return null;
	}

	$error = [                            // Exit   Description from http://php.net/manual/en/errorfunc.constants.php
		'1'     => 'E_ERROR',             //   Y    Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
		'2'     => 'E_WARNING',           //   -    Run-time warnings (non-fatal errors). Execution of the script is not halted.
		'4'     => 'E_PARSE',             //   Y    Compile-time parse errors. Parse errors should only be generated by the parser.
		'8'     => 'E_NOTICE',            //   -    Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.
		'16'    => 'E_CORE_ERROR',        //   Y    Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.
		'32'    => 'E_CORE_WARNING',      //   -    Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.
		'64'    => 'E_COMPILE_ERROR',     //   Y    Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.
		'128'   => 'E_COMPILE_WARNING',   //   -    Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.
		'256'   => 'E_USER_ERROR',        //   Y    User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().
		'512'   => 'E_USER_WARNING',      //   -    User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().
		'1024'  => 'E_USER_NOTICE',       //   -    User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().
		'4096'  => 'E_RECOVERABLE_ERROR', //   Y    Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR.
		'8192'  => 'E_DEPRECATED',        //   -    Run-time notices. Enable this to receive warnings about code that will not work in future versions.
		'16384' => 'E_USER_DEPRECATED',   //   -    Run-time notices. Enable this to receive warnings about code that will not work in future versions.
	];

	// add error to log array
	$error_data['error']      = $err_no;
	$error_data['error_name'] = $error[$err_no] ?: 'UNKNOWN_ERROR';
	$error_data['message']    = $err_str;
	$error_data['file']       = $err_file;
	$error_data['line']       = $err_line;
	$error_data['backtrace']  = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);

	$log[] = $error_data;

	if (! in_array($err_no, [E_WARNING, E_NOTICE, E_CORE_WARNING, E_COMPILE_WARNING, E_USER_WARNING, E_USER_NOTICE, E_DEPRECATED, E_USER_DEPRECATED])) {
		// do not allow script to continue if error type is not listed above
		error_handler_final($log, true);
	}

	return null;
}

/**
 * Registered to register_shutdown_function()
 */
function error_handler_fatal()
{
	$error = error_get_last();
	// check if it's a core/fatal error, otherwise it's a normal shutdown
	if ($error !== NULL && in_array($error['type'], [E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR], true)) {
		error_handler($error['type'], $error['message'], $error['file'], $error['line']);
	}
}

/**
 * Registered to register_shutdown_function()
 * Logs the runtime errors (if any) and if necessary, redirects to error page.
 * @param $log
 * @param $fatal
 */
function error_handler_final($log, $fatal)
{
	// log the error
	$log_file = ERROR_HANDLER_LOG_DIRECTORY . ($fatal ? 'error-fatal.txt' : 'error-background.txt');

	$data = [];

	$data['unix'] = ERROR_HANDLER_UNIX;
	$data['date'] = date('j M Y \a\t H:i:s', ERROR_HANDLER_UNIX);
	$data['log']  = $log;

	$data = json_encode($data) . "\n";

	file_put_contents($log_file, $data, FILE_APPEND | LOCK_EX);

	if ($fatal) {
		if (ERROR_HANDLER_REDIRECT) {
			header('Location: ' . ERROR_HANDLER_REDIRECT);
		}
		else if (ERROR_HANDLER_MESSAGE) {
			echo ERROR_HANDLER_MESSAGE;
		}
		else {
			echo '<h1>PHP Fatal Error</h1>';
			echo '<hr />';
			echo '<pre>';
			print_r($log);
		}
		exit;
	}
}
